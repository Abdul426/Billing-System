
server.servlet.context-path=/billingsystem
management.endpoints.web.exposure.include=*
management.endpoints.enabled-by-default=true

#spring.jpa.hibernate.ddl-auto =update
#spring.jpa.show-sql = true
#spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.DB2400Dialect

logging.level.org.springframework.web=DEBUG
logging.level.org.hibernate=INFO

#spring.datasource.url=jdbc:as400://192.168.8.142:50000;naming=system;libraries=BILLING;sockettimeout=30000;thread used=false;transaction isolation=read commited;translatebinary=true;date format=iso;prompt=false
#spring.datasource.username=db2inst1
#spring.datasource.password=Welcome@12345$
#spring.datasource.driver-class-name=com.ibm.as400.access.AS400JDBCDriver



# ===============================
# = DATA SOURCE
# ===============================
# Set here configurations for the database connection
#spring.datasource.url=jdbc:db2://:50000/BILLING
#spring.datasource.username=db2inst1
#spring.datasource.password=Welcome@12345$
spring.datasource.billingsystem.driver-class-name=com.ibm.db2.jcc.DB2Driver
# Keep the connection alive if idle for a long time (needed in production)
spring.datasource.testWhileIdle=true
spring.datasource.validationQuery=SELECT 1
# ===============================
# = JPA / HIBERNATE
# ===============================
# Show or not log for each sql query
spring.jpa.show-sql=true
# Hibernate ddl auto (create, create-drop, update): with "create-drop" the database
# schema will be automatically created afresh for every start of application
spring.jpa.hibernate.ddl-auto=update
# Naming strategy
spring.jpa.hibernate.naming.implicit-strategy=org.hibernate.boot.model.naming.ImplicitNamingStrategyLegacyHbmImpl
spring.jpa.hibernate.naming.physical-strategy=org.springframework.boot.orm.jpa.hibernate.SpringPhysicalNamingStrategy
# Allows Hibernate to generate SQL optimized for a particular DBMS
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.DB2Dialect
